<?xml version="1.0" encoding="UTF-8" ?>

<!--
scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟
debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false
-->
<configuration scan="true" scanPeriod="180 seconds" debug="true">

    <!--application.yml 传递参数，进行自定义日志路径，不能使用logback 自带的<property>标签 -->
    <!--配置日志根目录-->
    <springProperty scope="context" name="logdir" source="logback.logdir"/>
    <!--
    <property>用来定义变量值的标签, 有两个属性，name和value；
    其中name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量
    -->
    <!--     <property name="logdir" value="/home/tomcat/var/logs/eba-thirdPartyApi-service"></property> -->
    <timestamp key="date" datePattern="yyyy-MM-dd" />

    <!--appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略-->
    <!--控制台输出策略-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--
        <encoder>表示对日志进行编码：
        %d{HH: mm:ss.SSS}——日志输出时间
        %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
        %-5level——日志级别，并且使用5个字符靠左对齐
        %logger{36}——日志输出者的名字
        %msg——日志消息
        %n——平台的换行符-->
        <!--layout和encoder，都可以将事件转换为格式化后的日志记录，但是控制台输出使用layout，文件输出使用encoder-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </layout>
    </appender>

    <!--文件输出策略-->
    <appender name="fileOut" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，所以我们使用下面的策略，可以避免输出 Error 的日志-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            &lt;!&ndash;过滤等级&ndash;&gt;-->
<!--            <level>ERROR</level>-->
<!--            &lt;!&ndash;匹配到就禁止&ndash;&gt;-->
<!--            <onMatch>DENY</onMatch>-->
<!--            &lt;!&ndash;没有匹配到就允许&ndash;&gt;-->
<!--            <onMismatch>ACCEPT</onMismatch>-->
<!--        </filter>-->
        <!--
        日志名称，如果没有file 属性，那么只会使用fileNamePattern的文件路径规则
        如果同时有<file>和<fileNamePattern>，那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的
         -->
        <file>${logdir}/imooc-foodie-dev.log</file>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式，把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <fileNamePattern>${logdir}/imooc-foodie-dev-%d{yyyy-MM-dd}.%i.zip</fileNamePattern>
            <!-- keep 30 days -->
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 设置文件大于10MB进行压缩归档 -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <!--日志输出编码格式化-->
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--
    <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的additivity属性。
    name:用来指定受此logger约束的某一个包或者具体的某一个类。
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。
    additivity:是否向上级logger传递打印信息。默认是true
    -->
    <!--带有多个logger的配置，指定级别，指定appender-->
    <logger name="org.springframework.scheduling" level="INFO">
        <appender-ref ref="console"/>
        <appender-ref ref="fileOut"/>
    </logger>
    <logger name="org.hibernate.SQL" level="INFO"/>
    <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="WARN"/>
    <logger name="org.hibernate.type.descriptor.sql.BasicExtractor" level="WARN"/>

    <!--
    root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性,开发测试使用debug，生产使用info
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL,默认是DEBUG。
    可以包含零个或多个元素，标识这个appender将会添加到这个logger
    -->
    <root level="DEBUG" >
        <appender-ref ref="console"/>
        <appender-ref ref="fileOut"/>
    </root>

</configuration>